import React, { useState, useEffect, useMemo } from 'react';

// --- Icon Components ---
const HomeIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>;
const PlusCircleIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="8" x2="12" y2="16"/><line x1="8" y1="12" x2="16" y2="12"/></svg>;
const ListIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="8" y1="6" x2="21" y2="6"/><line x1="8" y1="12" x2="21" y2="12"/><line x1="8" y1="18" x2="21" y2="18"/><line x1="3" y1="6" x2="3.01" y2="6"/><line x1="3" y1="12" x2="3.01" y2="12"/><line x1="3" y1="18" x2="3.01" y2="18"/></svg>;
const SettingsIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 0 2.73l-.15.1a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l-.22-.38a2 2 0 0 0-.73-2.73l-.15-.1a2 2 0 0 1 0-2.73l.15-.1a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/></svg>;
const UsersIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>;
const PieChartIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21.21 15.89A10 10 0 1 1 8 2.83"/><path d="M22 12A10 10 0 0 0 12 2v10z"/></svg>;
const LogOutIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16 17 21 12 16 7"/><line x1="21" y1="12" x2="9" y2="12"/></svg>;
const ChevronDownIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m6 9 6 6 6-6"/></svg>;
const CalendarIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" y1="2" x2="16" y2="6"/><line x1="8" y1="2" x2="8" y2="6"/><line x1="3" y1="10" x2="21" y2="10"/></svg>;
const Edit3Icon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 20h9"/><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4Z"/></svg>;
const Trash2Icon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="m8 6 2-4h4l2 4"/><line x1="10" y1="11" x2="10" y2="17"/><line x1="14" y1="11" x2="14" y2="17"/></svg>;
const FilterIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/></svg>;
const DollarSignIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" y1="1" x2="12" y2="23"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>;
const TagIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z"/><path d="M7 7h.01"/></svg>;
const CheckCircleIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22 4 12 14.01 9 11.01"/></svg>;
const ArrowRightIcon = ({ className }) => <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="5" y1="12" x2="19" y2="12"/><polyline points="12 5 19 12 12 19"/></svg>;

// --- Mock Data and UI Components (shadcn/ui style) ---
const mockUser1 = { id: 'user1', name: 'あなた', avatar: 'https://placehold.co/100x100/E2E8F0/4A5568?text=A' };
const mockUser2 = { id: 'user2', name: 'パートナー', avatar: 'https://placehold.co/100x100/E2E8F0/4A5568?text=P' };
const initialCategories = [ { id: 'cat1', name: '食費', color: 'bg-blue-500', defaultSplit: { user1: 50, user2: 50 }, isCustom: false }, { id: 'cat2', name: '光熱費', color: 'bg-green-500', defaultSplit: { user1: 60, user2: 40 }, isCustom: false }, { id: 'cat3', name: '家賃', color: 'bg-red-500', defaultSplit: { user1: 50, user2: 50 }, isCustom: false }, { id: 'cat4', name: '交通費', color: 'bg-yellow-500', defaultSplit: { user1: 70, user2: 30 }, isCustom: false }, { id: 'cat5', name: '娯楽費', color: 'bg-purple-500', defaultSplit: { user1: 50, user2: 50 }, isCustom: false }, { id: 'cat6', name: '日用品', color: 'bg-pink-500', defaultSplit: { user1: 50, user2: 50 }, isCustom: false }, { id: 'cat7', name: '医療費', color: 'bg-teal-500', defaultSplit: { user1: 50, user2: 50 }, isCustom: false }, { id: 'cat8', name: 'その他', color: 'bg-gray-500', defaultSplit: { user1: 50, user2: 50 }, isCustom: false },];
const mockCoupleProfile = { coupleName: 'わたしたちの家計簿', user1: mockUser1, user2: mockUser2, defaultSplit: { user1: 50, user2: 50 },};
const Button = ({ children, variant = 'default', size = 'default', className = '', ...props }) => { const baseStyle = "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background"; const variants = { default: "bg-slate-900 text-white hover:bg-slate-800", destructive: "bg-red-500 text-white hover:bg-red-600", outline: "border border-slate-300 hover:bg-slate-100", secondary: "bg-slate-200 text-slate-900 hover:bg-slate-300", ghost: "hover:bg-slate-100", link: "underline-offset-4 hover:underline text-slate-900", }; const sizes = { default: "h-10 py-2 px-4", sm: "h-9 px-3 rounded-md", lg: "h-11 px-8 rounded-md", }; return <button className={`${baseStyle} ${variants[variant]} ${sizes[size]} ${className}`} {...props}>{children}</button>; };
const Input = ({ className = '', ...props }) => ( <input className={`flex h-10 w-full rounded-md border border-slate-300 bg-transparent py-2 px-3 text-sm placeholder:text-slate-400 focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );
const Label = ({ children, htmlFor, className = '' }) => ( <label htmlFor={htmlFor} className={`text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`}>{children}</label> );
const Select = ({ children, className = '', ...props }) => ( <select className={`flex h-10 w-full items-center justify-between rounded-md border border-slate-300 bg-transparent py-2 px-3 text-sm placeholder:text-slate-400 focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 ${className}`} {...props}> {children} </select> );
const Card = ({ children, className = '' }) => ( <div className={`rounded-xl border bg-white text-slate-900 shadow ${className}`}> {children} </div> );
const CardHeader = ({ children, className = '' }) => <div className={`flex flex-col space-y-1.5 p-6 ${className}`}>{children}</div>;
const CardTitle = ({ children, className = '' }) => <h3 className={`text-lg font-semibold leading-none tracking-tight ${className}`}>{children}</h3>;
const CardDescription = ({ children, className = '' }) => <p className={`text-sm text-slate-500 ${className}`}>{children}</p>;
const CardContent = ({ children, className = '' }) => <div className={`p-6 pt-0 ${className}`}>{children}</div>;
const CardFooter = ({ children, className = '' }) => <div className={`flex items-center p-6 pt-0 ${className}`}>{children}</div>;
const SplitRatioInput = ({ user1, user2, split, onSplitChange, presets = [] }) => { const [splitUser1, setSplitUser1] = useState(split.user1); const [splitUser2, setSplitUser2] = useState(split.user2); const [isLocked, setIsLocked] = useState(true); useEffect(() => { setSplitUser1(split.user1); setSplitUser2(split.user2); }, [split]); const handleUser1Change = (e) => { let value = parseInt(e.target.value, 10); if (isNaN(value) || value < 0) value = 0; if (value > 100) value = 100; setSplitUser1(value); if (isLocked) { const newSplitUser2 = 100 - value; setSplitUser2(newSplitUser2); onSplitChange({ user1: value, user2: newSplitUser2 }); } else { onSplitChange({ user1: value, user2: splitUser2 }); } }; const handleUser2Change = (e) => { let value = parseInt(e.target.value, 10); if (isNaN(value) || value < 0) value = 0; if (value > 100) value = 100; setSplitUser2(value); if (isLocked) { const newSplitUser1 = 100 - value; setSplitUser1(newSplitUser1); onSplitChange({ user1: newSplitUser1, user2: value }); } else { onSplitChange({ user1: splitUser1, user2: value }); } }; const handlePreset = (presetSplit) => { setSplitUser1(presetSplit.user1); setSplitUser2(presetSplit.user2); onSplitChange(presetSplit); }; const toggleLock = () => { const newLockState = !isLocked; setIsLocked(newLockState); if (newLockState) { if (splitUser1 + splitUser2 !== 100) { const adjustedUser2 = 100 - splitUser1; setSplitUser2(adjustedUser2 < 0 ? 0 : adjustedUser2); onSplitChange({ user1: splitUser1, user2: adjustedUser2 < 0 ? 0 : adjustedUser2 }); } } }
const totalSplit = splitUser1 + splitUser2; return ( <div className="space-y-3"> <div className="flex items-center space-x-4"> <div className="flex-1"> <Label htmlFor={`splitUser1_${user1.id}`}>{user1.name}</Label> <div className="flex items-center space-x-2"> <Input type="number" id={`splitUser1_${user1.id}`} value={splitUser1} onChange={handleUser1Change} min="0" max="100" className="w-20 text-center" /> <span>%</span> </div> </div> <div className="flex-1"> <Label htmlFor={`splitUser2_${user2.id}`}>{user2.name}</Label> <div className="flex items-center space-x-2"> <Input type="number" id={`splitUser2_${user2.id}`} value={splitUser2} onChange={handleUser2Change} min="0" max="100" className="w-20 text-center" /> <span>%</span> </div> </div> </div> <div className="flex items-center justify-between"> <div className="flex items-center space-x-2"> <input type="checkbox" id={`lockRatio_${user1.id}_${user2.id}`} checked={isLocked} onChange={toggleLock} className="rounded"/> <Label htmlFor={`lockRatio_${user1.id}_${user2.id}`} className="text-sm">割合を固定 (合計100%)</Label> </div> {totalSplit !== 100 && ( <p className="text-sm text-red-500">合計が100%になりません ({totalSplit}%)</p> )} </div> {presets.length > 0 && ( <div className="flex flex-wrap gap-2 pt-2"> {presets.map((preset, index) => ( <Button key={index} variant="outline" size="sm" onClick={() => handlePreset(preset.split)}> {preset.label} </Button> ))} </div> )} </div> ); };

// --- Screen Components (for Main App) ---
const ExpenseInputScreen = ({ user1, user2, categories, onAddExpense, editingExpense, onUpdateExpense, setCurrentPage }) => { return <div className="p-4">支出入力画面 (実装省略)</div>; };
const ExpenseListScreen = ({ expenses, categories, user1, user2, onDeleteExpense, onEditExpense, setCurrentPage }) => { return <div className="p-4">支出一覧画面 (実装省略)</div>; };
const DashboardScreen = ({ user1, user2, expenses, categories, budget, setCurrentPage, settlements, onEditExpense }) => { return <div className="p-4">ダッシュボード画面 (実装省略)</div>; };
const SplitRatioSettingsScreen = ({ user1, user2, coupleProfile, categories, onUpdateCoupleDefaultSplit, onUpdateCategoryDefaultSplit }) => { return <div className="p-4">分担比率設定画面 (実装省略)</div>; };
const CategoryManagementScreen = ({ categories, onAddCategory, onUpdateCategory, user1, user2, coupleProfile }) => { return <div className="p-4">カテゴリ管理画面 (実装省略)</div>; };
const BudgetScreen = ({ budget, onUpdateBudget, categories, user1, user2 }) => { return <div className="p-4">予算管理画面 (実装省略)</div>; };
const SettlementScreen = ({ expenses, user1, user2, settlements, onAddSettlement, setCurrentPage }) => { return <div className="p-4">精算画面 (実装省略)</div>; };


// --- Landing Page, Auth Screens ---
const LandingScreen = ({ setCurrentPage }) => {
  const features = [ { icon: <PlusCircleIcon className="h-8 w-8 text-blue-600"/>, title: "かんたん支出入力", description: "日々の支出を素早く直感的に記録。面倒な入力作業から解放されます。" }, { icon: <UsersIcon className="h-8 w-8 text-blue-600"/>, title: "自由な分担比率", description: "支出ごと、カテゴリごとに分担比率を自由に設定。二人のルールに柔軟に対応します。" }, { icon: <CheckCircleIcon className="h-8 w-8 text-blue-600"/>, title: "スマートな精算", description: "期間を指定するだけで、誰が誰にいくら支払うべきかを自動計算。精算の手間を大幅に削減します。" } ];
  return (
    <div className="bg-white text-slate-800">
      <header className="fixed top-0 left-0 right-0 bg-white/80 backdrop-blur-sm z-20 border-b">
        <div className="container mx-auto px-6 py-4 flex justify-between items-center">
          <h1 className="text-2xl font-bold text-slate-900">二人のかんたん家計簿</h1>
          <nav className="space-x-4">
            <Button variant="ghost" onClick={() => setCurrentPage('login')}>ログイン</Button>
            <Button onClick={() => setCurrentPage('signup')}>無料で始める</Button>
          </nav>
        </div>
      </header>
      <main className="pt-24">
        <section className="text-center py-20 md:py-32 bg-slate-50">
          <div className="container mx-auto px-6">
            <h2 className="text-4xl md:text-6xl font-extrabold text-slate-900 leading-tight"> 二人の家計、もっとシンプルに。 </h2>
            <p className="mt-6 text-lg md:text-xl text-slate-600 max-w-2xl mx-auto"> 支出の記録から、面倒な精算まで。カップル・夫婦のためのお金の管理を、これ一つでスマートに解決します。 </p>
            <div className="mt-10">
              <Button size="lg" onClick={() => setCurrentPage('signup')} className="bg-blue-600 text-white hover:bg-blue-700 shadow-lg shadow-blue-500/30 transform hover:scale-105 transition-transform"> 今すぐ無料で始める <ArrowRightIcon className="ml-2 h-5 w-5" /> </Button>
            </div>
            <div className="mt-16">
                 <img src="https://placehold.co/1200x600/E0E7FF/4338CA?text=Dashboard+UI+Preview" alt="アプリのダッシュボードUIプレビュー" className="rounded-xl shadow-2xl mx-auto" />
            </div>
          </div>
        </section>
        <section className="py-20 md:py-24">
            <div className="container mx-auto px-6">
                <div className="text-center mb-16">
                    <h3 className="text-3xl md:text-4xl font-bold text-slate-900">なぜ「二人のかんたん家計簿」？</h3>
                    <p className="mt-4 text-slate-600">お金の話をもっとポジティブに。わたしたちがサポートします。</p>
                </div>
                <div className="grid md:grid-cols-3 gap-8"> {features.map((feature, index) => ( <div key={index} className="bg-slate-50 p-8 rounded-xl text-center shadow-sm hover:shadow-lg transition-shadow"> <div className="flex justify-center mb-4">{feature.icon}</div> <h4 className="text-xl font-semibold mb-2">{feature.title}</h4> <p className="text-slate-600">{feature.description}</p> </div> ))} </div>
            </div>
        </section>
        <section className="py-20 bg-blue-600 text-white">
          <div className="container mx-auto px-6 text-center">
            <h3 className="text-3xl md:text-4xl font-bold">さあ、今日から始めよう</h3>
            <p className="mt-4 max-w-xl mx-auto">登録はたったの1分。二人の新しい家計管理を、今すぐ体験してください。</p>
            <div className="mt-8">
              <Button size="lg" onClick={() => setCurrentPage('signup')} className="bg-white text-blue-600 hover:bg-slate-100"> 無料でアカウント作成 </Button>
            </div>
          </div>
        </section>
      </main>
      <footer className="py-8 bg-slate-100">
        <div className="container mx-auto px-6 text-center text-slate-500 text-sm">
          <p>&copy; {new Date().getFullYear()} 二人のかんたん家計簿. All Rights Reserved.</p>
        </div>
      </footer>
    </div>
  );
};

const LoginScreen = ({ handleLogin, setCurrentPage }) => {
  const [email, setEmail] = useState(''); const [password, setPassword] = useState('');
  const onLogin = (e) => { e.preventDefault(); if (email && password) { console.log('Logging in with:', email, password); handleLogin(); } else { alert('メールアドレスとパスワードを入力してください。'); } };
  return (
    <div className="min-h-screen flex items-center justify-center bg-slate-100">
      <div className="w-full max-w-md p-4">
         <div className="text-center mb-8">
             <h1 className="text-3xl font-bold text-slate-800">二人のかんたん家計簿</h1>
             <p className="text-slate-500">ログインして、家計簿を始めましょう</p>
         </div>
        <Card>
          <CardHeader> <CardTitle>ログイン</CardTitle> </CardHeader>
          <CardContent>
            <form onSubmit={onLogin} className="space-y-4">
              <div>
                <Label htmlFor="email">メールアドレス</Label>
                <Input type="email" id="email" placeholder="user@example.com" value={email} onChange={(e) => setEmail(e.target.value)} required />
              </div>
              <div>
                <Label htmlFor="password">パスワード</Label>
                <Input type="password" id="password" placeholder="********" value={password} onChange={(e) => setPassword(e.target.value)} required />
              </div>
              <Button type="submit" className="w-full">ログイン</Button>
            </form>
          </CardContent>
          <CardFooter className="flex-col items-start gap-2">
            <Button variant="link" className="p-0 h-auto" onClick={() => setCurrentPage('forgotPassword')}> パスワードをお忘れですか？ </Button>
            <Button variant="link" className="p-0 h-auto" onClick={() => setCurrentPage('signup')}> アカウントをお持ちでないですか？ 新規登録 </Button>
            <Button variant="outline" className="w-full mt-4" onClick={() => setCurrentPage('landing')}> トップページに戻る </Button>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
};

const SignUpScreen = ({ handleSignUp, setCurrentPage }) => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');

    const onSignUp = (e) => {
        e.preventDefault();
        if (password !== confirmPassword) {
            alert("パスワードが一致しません。");
            return;
        }
        if (name && email && password) {
            console.log('Signing up with:', name, email, password);
            handleSignUp(); // 実際にはここでAPIを呼び出し、成功したらログイン状態にする
        } else {
            alert("すべての項目を入力してください。");
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-slate-100">
          <div className="w-full max-w-md p-4">
             <div className="text-center mb-8">
                 <h1 className="text-3xl font-bold text-slate-800">アカウント作成</h1>
                 <p className="text-slate-500">新しい家計簿を始めましょう</p>
             </div>
            <Card>
              <CardHeader> <CardTitle>新規登録</CardTitle> </CardHeader>
              <CardContent>
                <form onSubmit={onSignUp} className="space-y-4">
                  <div>
                    <Label htmlFor="name">お名前</Label>
                    <Input type="text" id="name" placeholder="山田 花子" value={name} onChange={(e) => setName(e.target.value)} required />
                  </div>
                  <div>
                    <Label htmlFor="signup-email">メールアドレス</Label>
                    <Input type="email" id="signup-email" placeholder="user@example.com" value={email} onChange={(e) => setEmail(e.target.value)} required />
                  </div>
                  <div>
                    <Label htmlFor="signup-password">パスワード</Label>
                    <Input type="password" id="signup-password" placeholder="********" value={password} onChange={(e) => setPassword(e.target.value)} required />
                  </div>
                   <div>
                    <Label htmlFor="confirm-password">パスワード（確認用）</Label>
                    <Input type="password" id="confirm-password" placeholder="********" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />
                  </div>
                  <Button type="submit" className="w-full">アカウントを作成</Button>
                </form>
              </CardContent>
              <CardFooter className="flex-col items-start gap-2">
                <Button variant="link" className="p-0 h-auto" onClick={() => setCurrentPage('login')}> すでにアカウントをお持ちですか？ ログイン </Button>
                <Button variant="outline" className="w-full mt-4" onClick={() => setCurrentPage('landing')}> トップページに戻る </Button>
              </CardFooter>
            </Card>
          </div>
        </div>
    );
};

const ForgotPasswordScreen = ({ setCurrentPage }) => {
    const [email, setEmail] = useState('');

    const onRequestReset = (e) => {
        e.preventDefault();
        if(email) {
            alert(`パスワード再設定用のリンクを ${email} に送信しました。（シミュレーション）`);
            setCurrentPage('login');
        } else {
            alert('メールアドレスを入力してください。');
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-slate-100">
            <div className="w-full max-w-md p-4">
                <div className="text-center mb-8">
                    <h1 className="text-3xl font-bold text-slate-800">パスワードをお忘れですか？</h1>
                    <p className="text-slate-500">ご登録のメールアドレスを入力してください。</p>
                </div>
                <Card>
                    <CardHeader> <CardTitle>パスワード再設定</CardTitle> </CardHeader>
                    <CardContent>
                        <form onSubmit={onRequestReset} className="space-y-4">
                            <div>
                                <Label htmlFor="reset-email">メールアドレス</Label>
                                <Input type="email" id="reset-email" placeholder="user@example.com" value={email} onChange={(e) => setEmail(e.target.value)} required />
                            </div>
                            <Button type="submit" className="w-full">再設定リンクを送信</Button>
                        </form>
                    </CardContent>
                    <CardFooter>
                        <Button variant="link" className="p-0 h-auto" onClick={() => setCurrentPage('login')}>ログイン画面に戻る</Button>
                    </CardFooter>
                </Card>
            </div>
        </div>
    );
};


// --- Refactored Main App Component ---
const MainApp = ({ handleLogout }) => {
  const [currentPage, setCurrentPage] = useState('dashboard');
  const [expenses, setExpenses] = useState([ { id: 'exp1', date: '2025-05-30', categoryId: 'cat1', amount: 3000, paidBy: 'user1', memo: 'スーパーでの買い物', split: { user1: 50, user2: 50 }, settled: false }, { id: 'exp2', date: '2025-05-29', categoryId: 'cat3', amount: 80000, paidBy: 'user2', memo: '今月の家賃', split: { user1: 50, user2: 50 }, settled: false }, { id: 'exp3', date: '2025-04-15', categoryId: 'cat5', amount: 5000, paidBy: 'user1', memo: '映画', split: { user1: 30, user2: 70 }, settled: true }, ]);
  const [categories, setCategories] = useState(initialCategories);
  const [coupleProfile, setCoupleProfile] = useState(mockCoupleProfile);
  const [budget, setBudget] = useState({ monthlyTotal: 250000, categories: { 'cat1': 50000, 'cat5': 30000 } });
  const [editingExpense, setEditingExpense] = useState(null);
  const [settlements, setSettlements] = useState([ { id: 'settle-1', date: '2025-05-01', periodStart: '2025-04-01', periodEnd: '2025-04-30', count: 1, paidByUser1: 5000, paidByUser2: 0, owedByUser1: 1500, owedByUser2: 3500, netTransferUser1ToUser2: -3500, expensesToSettleIds: ['exp3'] } ]);
  const handleAddExpense = (newExpense) => { setExpenses(prev => [newExpense, ...prev]); }; const handleUpdateExpense = (updatedExpense) => { setExpenses(prev => prev.map(exp => exp.id === updatedExpense.id ? updatedExpense : exp)); setEditingExpense(null); }; const handleDeleteExpense = (expenseId) => { setExpenses(prev => prev.filter(exp => exp.id !== expenseId)); }; const handleEditExpense = (expense) => { setEditingExpense(expense); setCurrentPage('expenseInput'); }; const handleUpdateCoupleDefaultSplit = (newSplit) => { setCoupleProfile(prev => ({ ...prev, defaultSplit: newSplit })); }; const handleUpdateCategoryDefaultSplit = (categoryId, newSplit) => { setCategories(prev => prev.map(cat => cat.id === categoryId ? { ...cat, defaultSplit: newSplit } : cat)); }; const handleAddCategory = (newCategoryData) => { setCategories(prev => [...prev, { id: `cat-${Date.now()}`, ...newCategoryData }]); }; const handleUpdateCategory = (updatedCategoryData) => { setCategories(prev => prev.map(cat => cat.id === updatedCategoryData.id ? updatedCategoryData : cat)); }; const handleUpdateBudget = (newBudget) => { setBudget(newBudget); }; const handleAddSettlement = (newSettlement) => { setSettlements(prev => [newSettlement, ...prev]); setExpenses(prevExpenses => prevExpenses.map(exp => newSettlement.expensesToSettleIds.includes(exp.id) ? { ...exp, settled: true } : exp)); };

  const renderPage = () => {
    const props = { user1: coupleProfile.user1, user2: coupleProfile.user2, coupleProfile, categories, budget, expenses, settlements, setCurrentPage, onAddExpense: handleAddExpense, onUpdateExpense: handleUpdateExpense, onDeleteExpense: handleDeleteExpense, onEditExpense: handleEditExpense, onUpdateCoupleDefaultSplit: handleUpdateCoupleDefaultSplit, onUpdateCategoryDefaultSplit: handleUpdateCategoryDefaultSplit, onAddCategory: handleAddCategory, onUpdateCategory: handleUpdateCategory, onUpdateBudget: handleUpdateBudget, onAddSettlement: handleAddSettlement, editingExpense: editingExpense, };
    switch (currentPage) {
      case 'dashboard': return <DashboardScreen {...props} />;
      case 'expenseInput': return <ExpenseInputScreen {...props} />;
      case 'expenseList': return <ExpenseListScreen {...props} />;
      case 'splitSettings': return <SplitRatioSettingsScreen {...props} />;
      case 'categoryManagement': return <CategoryManagementScreen {...props} />;
      case 'budget': return <BudgetScreen {...props} />;
      case 'settlement': return <SettlementScreen {...props} />;
      default: return <DashboardScreen {...props} />;
    }
  };

  const navItems = [ { id: 'dashboard', label: 'ダッシュボード', icon: HomeIcon, action: () => { setEditingExpense(null); setCurrentPage('dashboard');} }, { id: 'expenseInput', label: '支出入力', icon: PlusCircleIcon, action: () => { setEditingExpense(null); setCurrentPage('expenseInput');} }, { id: 'expenseList', label: '支出一覧', icon: ListIcon, action: () => { setEditingExpense(null); setCurrentPage('expenseList');} }, { id: 'settlement', label: '精算', icon: CheckCircleIcon, action: () => { setEditingExpense(null); setCurrentPage('settlement');} }, { id: 'budget', label: '予算管理', icon: DollarSignIcon, action: () => { setEditingExpense(null); setCurrentPage('budget');} }, { id: 'categoryManagement', label: 'カテゴリ設定', icon: TagIcon, action: () => { setEditingExpense(null); setCurrentPage('categoryManagement');} }, { id: 'splitSettings', label: '分担比率設定', icon: UsersIcon, action: () => { setEditingExpense(null); setCurrentPage('splitSettings');} }, ];

  return (
    <div className="flex flex-col md:flex-row min-h-screen bg-slate-100 font-sans">
      <header className="bg-white shadow-md md:hidden sticky top-0 z-10"> <div className="container mx-auto px-4 py-3 flex justify-between items-center"> <h1 className="text-xl font-bold text-slate-800">{coupleProfile.coupleName}</h1> </div> </header>
      <nav className="hidden md:flex md:flex-col md:w-64 bg-white border-r border-slate-200 p-4 space-y-1.5 sticky top-0 h-screen overflow-y-auto">
        <div className="px-2 mb-4"> <h1 className="text-2xl font-bold text-slate-800">{coupleProfile.coupleName}</h1> <p className="text-sm text-slate-500">ようこそ、{coupleProfile.user1.name}さん</p> </div>
        {navItems.map(item => ( <Button key={item.id} variant={currentPage === item.id ? 'secondary' : 'ghost'} className="w-full justify-start !text-base px-3 py-2.5" onClick={item.action}> <item.icon className="mr-3 h-5 w-5 flex-shrink-0" /> {item.label} </Button> ))}
        <div className="mt-auto pt-4 border-t border-slate-200"> <Button variant="ghost" className="w-full justify-start !text-base px-3 py-2.5" onClick={handleLogout}> <LogOutIcon className="mr-3 h-5 w-5" /> ログアウト </Button> </div>
      </nav>
      <main className="flex-1 overflow-y-auto">{renderPage()}</main>
      <nav className="md:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-slate-200 shadow-top p-1.5 flex justify-around z-10">
        {navItems.slice(0, 4).map(item => ( <Button key={item.id + "-mobile"} variant="ghost" className={`flex flex-col items-center h-auto p-1.5 rounded-lg ${currentPage === item.id ? 'text-blue-600 bg-blue-50' : 'text-slate-600'}`} onClick={item.action}> <item.icon className="h-6 w-6 mb-0.5" /> <span className="text-xs leading-tight">{item.label}</span> </Button> ))}
         <Button variant="ghost" className={`flex flex-col items-center h-auto p-1.5 rounded-lg text-slate-600`} onClick={() => alert('その他メニュー（未実装）')}> <ChevronDownIcon className="h-6 w-6 mb-0.5" /> <span className="text-xs leading-tight">その他</span> </Button>
      </nav>
      <div className="md:hidden pb-20"></div>
    </div>
  );
};

// --- Top-level App Component ---
const App = () => {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    // 'landing', 'login', 'signup', 'forgotPassword'
    const [currentPage, setCurrentPage] = useState('landing'); 

    const handleLogin = () => {
        setIsAuthenticated(true);
    };
    
    const handleSignUp = () => {
        // 新規登録成功後、自動的にログイン状態にする
        setIsAuthenticated(true);
    };

    const handleLogout = () => {
        setIsAuthenticated(false);
        setCurrentPage('login');
    };
    
    if (isAuthenticated) {
        return <MainApp handleLogout={handleLogout} />;
    }
    
    switch (currentPage) {
        case 'login':
            return <LoginScreen handleLogin={handleLogin} setCurrentPage={setCurrentPage} />;
        case 'signup':
            return <SignUpScreen handleSignUp={handleSignUp} setCurrentPage={setCurrentPage} />;
        case 'forgotPassword':
            return <ForgotPasswordScreen setCurrentPage={setCurrentPage} />;
        case 'landing':
        default:
            return <LandingScreen setCurrentPage={setCurrentPage} />;
    }
}

export default App;
